{
  "_args": [
    [
      {
        "raw": "ns-uploader@file:./ns_npm_repository/ns-uploader",
        "scope": null,
        "escapedName": "ns-uploader",
        "name": "ns-uploader",
        "rawSpec": "file:./ns_npm_repository/ns-uploader",
        "spec": "/Users/fmeilan/NCub8/ThemeDevTools/ns_npm_repository/ns-uploader",
        "type": "directory"
      },
      "/Users/fmeilan/NCub8/ThemeDevTools"
    ]
  ],
  "_from": "ns_npm_repository/ns-uploader",
  "_id": "ns-uploader@0.0.3",
  "_inCache": true,
  "_location": "/ns-uploader",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ns-uploader@file:./ns_npm_repository/ns-uploader",
    "scope": null,
    "escapedName": "ns-uploader",
    "name": "ns-uploader",
    "rawSpec": "file:./ns_npm_repository/ns-uploader",
    "spec": "/Users/fmeilan/NCub8/ThemeDevTools/ns_npm_repository/ns-uploader",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:ns_npm_repository/ns-uploader",
  "_shasum": "69e59ac5f6a0297f0626b787eeb3158f3a6efe2b",
  "_shrinkwrap": null,
  "_spec": "ns-uploader@file:./ns_npm_repository/ns-uploader",
  "_where": "/Users/fmeilan/NCub8/ThemeDevTools",
  "author": "",
  "dependencies": {
    "async": "2.5.0",
    "jasmine": "^2.8.0",
    "q": "1.5.1",
    "shelljs": "0.7.8",
    "suitetalk": "file:../suitetalk4node",
    "underscore": "1.8.3",
    "yargs": "10.0.3"
  },
  "description": "*folder uploader based on suitetalk4node*",
  "devDependencies": {},
  "license": "ISC",
  "main": "./src/index.js",
  "name": "ns-uploader",
  "optionalDependencies": {},
  "readme": "*folder uploader based on suitetalk4node*\r\n\r\nIt is very straight forward, the only thing worth to mention is that for performance, we use addlist netsuite operation to add files and folders so we only iterate by 'levels'\r\n\r\n#Using the command line client\r\n\r\n    nsuploader TODO\r\n\r\n#Using js api\r\n\r\n    TODO\r\n\r\n#Implementation notes\r\nIn this project we have implemented the folder upload algorithm using several techniques. \r\n\r\nThe current one is *impl_upsertList2* that uses upsertlist operation considering the manifest. \r\n\r\nOther old implementations are : \r\n * addlist : goes folder by folder and uses addlist operation on files. precondition: target folder must be empty. This is faster but has the restriction: each folder first-level files cannot weight more than 100mb in total.\r\n * add: it upload file by file. precondition: target folder must be empty. Restriction is minimal: each file cannot weight more than 100mb. \r\n * add_update: the same as add but first it checks if the file already exists and in that case update its content. Preconditions: none. This is the one should be used for 'gulp deploy'. \r\n\r\n#Changes\r\n\r\n * add support for addList when uploading files\r\n * add support for add adding file by file - slow but safe - only limit: each file cannot be larger than 100mb\r\n * inplemented definitive - single - implementation based on upsertlist operation\r\n\r\n#TODO\r\n * include / excludes blobs\r\n\r\n\r\n\r\n#QA \r\n\r\nthe current implementation of ns-uploader, implUpsertList2 should support the following scenarios:\r\n\r\n * deploy in a live/production site - because we use upsert, existing files are updated - this is supposed to be atomic operation well suited for updating live sites in production.\r\n\r\n * manifest not updated deploy once, remove a folder, deploy again  - because upsert operation will add the record if not exists\r\n\r\n * deploy to an empty folder\r\n\r\n * deploy, remove manifest, deploy again - well files are uploaded again - fact of life - we don't have a manifest\r\n\r\n\r\n\r\nsituations that we are not sure what happens: \r\n\r\n * an empty folder with a 'fake' manifest\r\n\r\n * deploy, remove a folder entry from the manifest, change something inside that folder, deploy again\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "node node_modules/jasmine/bin/jasmine.js"
  },
  "version": "0.0.3"
}
